import { useState } from 'react';
import './Quiz.scss';
import { useNavigate } from 'react-router-dom';

// const questions = [
//   {
//     title: 'React - —ç—Ç–æ ... ?',
//     variants: ['–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'],
//     correct: 0,
//   },
//   {
//     title: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç - —ç—Ç–æ ... ',
//     variants: ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', '—Ç–æ, —á—Ç–æ —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç–∞–∫–æ–µ'],
//     correct: 1,
//   },
//   {
//     title: '–ß—Ç–æ —Ç–∞–∫–æ–µ JSX?',
//     variants: [
//       '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π HTML',
//       '–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è',
//       '–≠—Ç–æ —Ç–æ—Ç –∂–µ HTML, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω—è—Ç—å JS-–∫–æ–¥',
//     ],
//     correct: 2,
//   },
// ];

const questions = [
  {
    title: '–ì–¥–µ –ê–π–¥—ã–Ω?',
    variants: ['–ì–∞—Ä–∞–∂', '–î–æ–º', '–£–Ω–∏–≤–µ—Ä', '–ö–∞–º–ø—É—Å'],
    correct: 1,
  },
  {
    title: '–ö–∞–∫–∞—è –º–∞—à–∏–Ω–∞ —É –º–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω–∞?',
    variants: ['–ú–µ—Ä—Å–µ–¥–µ—Å', '–ú–∞–∑–µ—Ä–∞—Ç–∏', '—Ç–æ, —á—Ç–æ —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç–∞–∫–æ–µ'],
    correct: 2,
  },
  {
    title: '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–±—Ä–æ—Ç–∞?',
    variants: [
      '–≠—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –∫–æ–¥ –¥—Ä—É–≥–æ–º—É',
      '–≠—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–æ–º–æ–≥ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥',
      '–≠—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –∫—É–ø–∏–ª —Å–µ–±–µ —à–æ–∫–æ–ª–∞–¥–∫—É',
      '–≠—Ç–æ –∫–æ–≥–¥–∞ –∫—É–ø–∏–ª —à–æ–∫–æ–ª–∞–¥–∫—É –∏ –Ω–µ —Å–∫–∞–∑–∞–ª —á—Ç–æ —Ç—ã –∫—É–ø–∏–ª —à–æ–∫–æ–ª–∞–¥–∫—É —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª–∏',
    ],
    correct: 3,
  },
  {
    title: '–ö–∞–∫ –ø–∏—à–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?',
    variants: [
      'Whrite',
      'Write',
      'Rite',
      'Piss',
      'Pisyat\'',
    ],
    correct: 0,
  },
  {
    title: '–ö—Ç–æ –¥—Ä—É–≥ –ß–µ–±—É—Ä–µ–∫–∞?',
    variants: [
      '–ë–µ–ª—è—à',
      '–ß–µ–±—É—Ä–∞—à–∫–∞',
      '–ì–µ–Ω–∞',
      '–¢–∞–Ω—è',
      '–õ–µ—Ä–∞',
      '–•–∞—á–∞–ø—É—Ä–∏',
      'Shi',
    ],
    correct: 0,
  },
  {
    title: '–ö—Ç–æ –≤ –º–∏—Ä–µ –µ–¥—ã?',
    variants: [
      '–ì–µ–Ω–∞',
      '–ß–µ–±—É—Ä–µ—à–∫–∞',
      '–í–∞–ª–µ—Ä–∏—è –ò–≥–æ—Ä–µ–≤–Ω–∞',
      '–ß–µ–±—É—Ä–∞—à–∫–∞',
      '–í–∞–ª–µ—Ä–∏—è',
      '–õ–µ—Ä–∞',
    ],
    correct: 5,
  },
  {
    title: '–£–≥–∞–¥–∞–π—Ç–µ –∫—Ç–æ —ç—Ç–æ –ø–æ –∑–≤—É–∫—É \'–ë—É–ª—å–∫\'?',
    variants: [
      '–í–æ–¥—è–Ω–æ–π',
      '–ë–∞–±–∞ —è–≥–∞',
      '–î–∏–º–∞',
      '–ê–≤–∞—Ç–∞—Ä –ê–ê–Ω–≥',
      '–ö–∞—Ä—Ç–æ—à–∫–∞',
    ],
    correct: 2,
  },
  {
    title: '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ üëå',
    variants: [
      '–ë–µ–∂–∞—Ç—å',
      '–ó–∞–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞',
      '–°—É–Ω—É—Ç—å –≤ –¥—ã—Ä–∫—É',
      'üëâ',
      '–ù–µ–¥–æ–≤–æ–ª—å–Ω–æ –∑–∞–∫–∞—Ç–∏—Ç—å –≥–ª–∞–∑–∞',
    ],
    correct: 3,
  },
];

function Result({correct, win}) {
  return (
    <div className="result">
      <img src="https://cdn-icons-png.flaticon.com/512/2278/2278992.png" />
      <h2>–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ {correct} –∏–∑ {questions.length}</h2>
      <a href='/quiz'>
      <button>{win ? '–ú–∞–ª–∞–¥–µ—Å –∫–∞–∫ —Å–æ–ª—ë–Ω–Ω—ã–π –∞–≥—É—Ä–µ—Ü!' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}</button>
      </a>
    </div>
  );
}

function Game({step, question, onClickVariant}) {
  const percentage = Math.round(step / questions.length * 100); 
  return (
    <>
      <div className="progress">
        <div style={{ width: `${percentage}%` }} className="progress__inner"></div>
      </div>
      <h1>{question.title}</h1>
      <ul>
        {
          question.variants.map((text, index) => (
            <li onClick={() => onClickVariant(index)} key={text}>{text}</li>
          ))
        }
      </ul>
    </>
  );
}

export const Quiz = () => {
  const navigate = useNavigate();
  const [step,setStep] = useState(0);
  const [correct,setCorrect] = useState(0);
  const question = questions[step];
  // const win = false;


  const onClickVariant = (index) => {
    setStep(step + 1);
    if (index === question.correct) {
      setCorrect(correct + 1);
    }
  };


  return (
    <div className="Quiz">
      {
        step !== questions.length 
        ? <Game 
            step={step} 
            question={question} 
            onClickVariant={onClickVariant} 
          /> 
        : <Result correct={correct} win={correct === questions.length ? true : false}/>
      }
      <div className='result'>
      <button onClick={() => navigate('/')}>–ù–∞–∑–∞–¥</button>
      </div>
    </div>
  );
}